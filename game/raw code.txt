<!DOCTYPE html>
<html>
<head>
    <title>3D Cube Jump Game</title>
    <style>
        body { margin: 0; }
        canvas { display: block; }
        #scoreboard {
            position: fixed;
            top: 20px;
            left: 20px;
            color: white;
            font-family: Arial, sans-serif;
            font-size: 24px;
            font-weight: bold;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            z-index: 100;
            display: none;
        }
        #controls {
            position: fixed;
            bottom: 20px;
            left: 20px;
            color: white;
            font-family: Arial, sans-serif;
            font-size: 16px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            z-index: 100;
            display: none;
        }
        #startMenu {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: white;
            font-family: Arial, sans-serif;
            z-index: 100;
        }
        #playButton {
            padding: 15px 40px;
            font-size: 24px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-top: 20px;
        }
        #playButton:hover {
            background-color: #45a049;
        }
        #gameTitle {
            font-size: 48px;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }
    </style>
</head>
<body>
    <div id="startMenu">
        <div id="gameTitle">3D Cube Jump</div>
        <button id="playButton">PLAY</button>
    </div>
    <div id="scoreboard">Score: <span id="score">0</span></div>
    <div id="controls">
        Camera Controls:<br>
        Left Click + Drag - Rotate Camera<br>
        Right Click + Drag - Pan Camera<br>
        Mouse Wheel - Zoom
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/FBXLoader.js"></script>
    <script>
        let scene, camera, renderer, player, platform, obstacle, backgroundBox;
        let isJumping = false;
        let gameOver = false;
        let score = 0;
        let scoreElement;
        let cameraOrbit = {
            radius: 15,
            theta: 0,    // horizontal angle
            phi: Math.PI / 4    // vertical angle
        };
        let isDragging = false;
        let isRightDragging = false;
        let previousMousePosition = { x: 0, y: 0 };
        let targetCameraPosition = new THREE.Vector3();
        let cameraTarget = new THREE.Vector3(0, 0, 0);

        // Add game state variable
        let gameStarted = false;

        let forestWalls;

        // Add new variables for character
        let character;
        let mixer;
        let currentAction;
        let animations = {
            idle: null,
            running: null,
            jumping: null
        };
        const clock = new THREE.Clock();

        function createForestEnvironment() {
            const textureLoader = new THREE.TextureLoader();
            const forestTexture = textureLoader.load('path_to_your_forest_image.jpg');
            
            // Create a large cylindrical environment
            const geometry = new THREE.CylinderGeometry(30, 30, 40, 32, 1, true);
            const material = new THREE.MeshPhongMaterial({
                map: forestTexture,
                side: THREE.BackSide,
                shininess: 0
            });
            
            forestWalls = new THREE.Mesh(geometry, material);
            forestWalls.position.y = 10;
            scene.add(forestWalls);

            // Add ground with forest floor texture
            const groundGeometry = new THREE.PlaneGeometry(60, 60);
            const groundMaterial = new THREE.MeshPhongMaterial({
                map: forestTexture,
                shininess: 5
            });
            const ground = new THREE.Mesh(groundGeometry, groundMaterial);
            ground.rotation.x = -Math.PI / 2;
            ground.position.y = -0.5;
            ground.receiveShadow = true;
            scene.add(ground);

            // Add some 3D trees
            addTrees();
        }

        function addTrees() {
            const treePositions = [
                [-15, 0, -10], [15, 0, -10],
                [-12, 0, -15], [12, 0, -15],
                [-8, 0, -12], [8, 0, -12],
                [-18, 0, -8], [18, 0, -8]
            ];

            treePositions.forEach(pos => {
                // Tree trunk
                const trunkGeometry = new THREE.CylinderGeometry(0.5, 0.7, 5, 8);
                const trunkMaterial = new THREE.MeshPhongMaterial({ color: 0x4a3219 });
                const trunk = new THREE.Mesh(trunkGeometry, trunkMaterial);
                trunk.position.set(pos[0], pos[1] + 2.5, pos[2]);
                trunk.castShadow = true;
                scene.add(trunk);

                // Tree leaves
                const leavesGeometry = new THREE.ConeGeometry(2, 4, 8);
                const leavesMaterial = new THREE.MeshPhongMaterial({ color: 0x2d5a27 });
                const leaves = new THREE.Mesh(leavesGeometry, leavesMaterial);
                leaves.position.set(pos[0], pos[1] + 6, pos[2]);
                leaves.castShadow = true;
                scene.add(leaves);
            });
        }

        function init() {
            scene = new THREE.Scene();
            
            // Enhanced lighting for forest
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
            scene.add(ambientLight);

            const sunLight = new THREE.DirectionalLight(0xffffff, 1);
            sunLight.position.set(10, 20, 10);
            sunLight.castShadow = true;
            sunLight.shadow.mapSize.width = 2048;
            sunLight.shadow.mapSize.height = 2048;
            sunLight.shadow.camera.near = 0.5;
            sunLight.shadow.camera.far = 50;
            sunLight.shadow.camera.left = -20;
            sunLight.shadow.camera.right = 20;
            sunLight.shadow.camera.top = 20;
            sunLight.shadow.camera.bottom = -20;
            scene.add(sunLight);

            // Add point lights for better atmosphere
            const pointLight1 = new THREE.PointLight(0xffffff, 0.5);
            pointLight1.position.set(-10, 5, -10);
            scene.add(pointLight1);

            const pointLight2 = new THREE.PointLight(0xffffff, 0.5);
            pointLight2.position.set(10, 5, -10);
            scene.add(pointLight2);

            // Create 3D forest environment
            createForestEnvironment();

            // Update materials to match forest theme
            const platformMaterial = new THREE.MeshPhongMaterial({ 
                color: 0x8b4513, // Wood color for platform
                shininess: 10,
                specular: 0x222222
            });

            const playerMaterial = new THREE.MeshPhongMaterial({ 
                color: 0x2ecc71,
                shininess: 30,
                specular: 0x444444
            });

            const obstacleMaterial = new THREE.MeshPhongMaterial({ 
                color: 0xe74c3c,
                shininess: 30,
                specular: 0x444444
            });

            // Enhanced camera with better angle
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(0, 5, 15);
            camera.rotation.x = -0.2;

            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.shadowMap.enabled = true;
            renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            document.body.appendChild(renderer.domElement);

            // Add background box
            const boxGeometry = new THREE.BoxGeometry(50, 30, 30);
            const boxMaterial = new THREE.MeshPhongMaterial({
                color: 0x808080,
                side: THREE.BackSide,
                shininess: 50,
                specular: 0x333333
            });
            backgroundBox = new THREE.Mesh(boxGeometry, boxMaterial);
            backgroundBox.position.set(0, 10, 0);
            backgroundBox.receiveShadow = true;
            scene.add(backgroundBox);

            // Create player with enhanced materials
            const playerGeometry = new THREE.BoxGeometry(1, 1, 1);
            player = new THREE.Mesh(playerGeometry, playerMaterial);
            player.position.y = 1;
            player.position.x = -8;
            player.castShadow = true;
            player.receiveShadow = true;
            scene.add(player);

            // Create platform with enhanced materials
            const platformGeometry = new THREE.BoxGeometry(20, 0.5, 4);
            platform = new THREE.Mesh(platformGeometry, platformMaterial);
            platform.position.y = -0.25;
            platform.receiveShadow = true;
            scene.add(platform);

            // Create obstacle with enhanced materials
            const obstacleGeometry = new THREE.BoxGeometry(1, 1, 1);
            obstacle = new THREE.Mesh(obstacleGeometry, obstacleMaterial);
            obstacle.castShadow = true;
            obstacle.receiveShadow = true;
            resetObstacle();
            scene.add(obstacle);

            // Set initial camera position
            updateCameraPosition();
            camera.position.copy(targetCameraPosition);
            camera.lookAt(cameraTarget);
            
            initCameraControls();

            // Adjust camera for better forest view
            camera.position.set(0, 5, 15);
            camera.lookAt(0, 0, 0);

            // Add subtle fog
            scene.fog = new THREE.Fog(0xc8e6c9, 25, 50);

            loadCharacterWithAnimations();
        }

        // Camera control functions
        function initCameraControls() {
            document.addEventListener('mousedown', onMouseDown);
            document.addEventListener('mouseup', onMouseUp);
            document.addEventListener('mousemove', onMouseMove);
            document.addEventListener('wheel', onMouseWheel);
        }

        function onMouseDown(event) {
            if (event.button === 0) { // Left click
                isDragging = true;
            } else if (event.button === 2) { // Right click
                isRightDragging = true;
            }
            previousMousePosition = {
                x: event.clientX,
                y: event.clientY
            };
        }

        function onMouseUp(event) {
            isDragging = false;
            isRightDragging = false;
        }

        function onMouseMove(event) {
            if (!isDragging && !isRightDragging) return;

            const deltaMove = {
                x: event.clientX - previousMousePosition.x,
                y: event.clientY - previousMousePosition.y
            };

            if (isDragging) { // Orbit
                cameraOrbit.theta -= deltaMove.x * 0.01;
                cameraOrbit.phi = Math.max(0.1, Math.min(Math.PI / 2, cameraOrbit.phi - deltaMove.y * 0.01));
                
                updateCameraPosition();
            } else if (isRightDragging) { // Pan
                const pan = new THREE.Vector3();
                pan.x = -deltaMove.x * 0.05;
                pan.z = -deltaMove.y * 0.05;
                pan.applyQuaternion(camera.quaternion);
                cameraTarget.add(pan);
                camera.position.add(pan);
            }

            previousMousePosition = {
                x: event.clientX,
                y: event.clientY
            };
        }

        function onMouseWheel(event) {
            const zoomSpeed = 0.1;
            cameraOrbit.radius = Math.max(5, Math.min(30, cameraOrbit.radius + event.deltaY * zoomSpeed));
            updateCameraPosition();
        }

        function updateCameraPosition() {
            targetCameraPosition.x = cameraOrbit.radius * Math.sin(cameraOrbit.theta) * Math.cos(cameraOrbit.phi);
            targetCameraPosition.y = cameraOrbit.radius * Math.sin(cameraOrbit.phi);
            targetCameraPosition.z = cameraOrbit.radius * Math.cos(cameraOrbit.theta) * Math.cos(cameraOrbit.phi);
            
            targetCameraPosition.add(cameraTarget);
        }

        function smoothCameraUpdate() {
            // Smooth camera movement
            camera.position.lerp(targetCameraPosition, 0.1);
            camera.lookAt(cameraTarget);
        }

        // Handle keyboard controls
        document.addEventListener('keydown', (event) => {
            if (!gameStarted || gameOver || !character) return;
            
            switch(event.key) {
                case 'ArrowLeft':
                    character.position.x -= 0.5;
                    character.rotation.y = Math.PI / 2;
                    if (!isJumping && animations.running) {
                        transitionTo(animations.running);
                    }
                    break;
                case 'ArrowRight':
                    character.position.x += 0.5;
                    character.rotation.y = -Math.PI / 2;
                    if (!isJumping && animations.running) {
                        transitionTo(animations.running);
                    }
                    break;
                case ' ':
                    if (!isJumping) jump();
                    break;
            }
        });

        document.addEventListener('keyup', (event) => {
            if (!gameStarted || gameOver || !character) return;
            
            if ((event.key === 'ArrowLeft' || event.key === 'ArrowRight') && !isJumping) {
                if (animations.idle) {
                    transitionTo(animations.idle);
                }
            }
        });

        // Jump function with improved mechanics
        function jump() {
            if (!character || isJumping) return;
            
            isJumping = true;
            let jumpHeight = 0;
            let jumpUp = true;

            // Play jump animation
            if (animations.jumping) {
                transitionTo(animations.jumping);
            }
            
            function animateJump() {
                if (jumpUp) {
                    jumpHeight += 0.15;
                    character.position.y += 0.15;
                    if (jumpHeight >= 3.5) jumpUp = false;
                } else {
                    jumpHeight -= 0.1;
                    character.position.y -= 0.1;
                    if (jumpHeight <= 0) {
                        isJumping = false;
                        character.position.y = 0;
                        // Return to idle animation
                        if (animations.idle) {
                            transitionTo(animations.idle);
                        }
                        return;
                    }
                }
                if (isJumping) requestAnimationFrame(animateJump);
            }
            
            animateJump();
        }

        // Reset obstacle position
        function resetObstacle() {
            obstacle.position.set(10, 1, 0);
        }

        // Check collision
        function checkCollision() {
            const playerBox = new THREE.Box3().setFromObject(player);
            const obstacleBox = new THREE.Box3().setFromObject(obstacle);
            return playerBox.intersectsBox(obstacleBox);
        }

        // Update score
        function updateScore() {
            score += 1;
            scoreElement.textContent = score;
        }

        // Reset game
        function resetGame() {
            gameOver = false;
            score = 0;
            scoreElement.textContent = score;
            if (character) {
                character.position.set(-8, 0, 0);
                character.rotation.y = 0;
                if (animations.idle) {
                    transitionTo(animations.idle);
                }
            }
            resetObstacle();
            gameStarted = true;
        }

        // Updated animation loop
        function animate() {
            requestAnimationFrame(animate);
            
            if (forestWalls) {
                forestWalls.rotation.y += 0.0001; // Very slow rotation for subtle movement
            }

            smoothCameraUpdate();

            if (gameStarted && !gameOver) {
                // Update collision detection for character
                if (character) {
                    const characterBox = new THREE.Box3().setFromObject(character);
                    const obstacleBox = new THREE.Box3().setFromObject(obstacle);
                    
                    if (characterBox.intersectsBox(obstacleBox)) {
                        gameOver = true;
                        const playAgain = confirm(`Game Over! Your score: ${score}\nPlay again?`);
                        if (playAgain) {
                            resetGame();
                        } else {
                            gameStarted = false;
                            document.getElementById('startMenu').style.display = 'block';
                            document.getElementById('scoreboard').style.display = 'none';
                            document.getElementById('controls').style.display = 'none';
                        }
                    }
                }
                
                obstacle.position.x -= 0.1;

                if (obstacle.position.x < -10) {
                    resetObstacle();
                    updateScore();
                }
            }

            renderer.render(scene, camera);
        }

        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        // Add play button functionality
        document.getElementById('playButton').addEventListener('click', startGame);

        function startGame() {
            gameStarted = true;
            document.getElementById('startMenu').style.display = 'none';
            document.getElementById('scoreboard').style.display = 'block';
            document.getElementById('controls').style.display = 'block';
            resetGame();
        }

        // Initialize game elements but don't start gameplay
        init();
        animate();

        function loadCharacterWithAnimations() {
            const fbxLoader = new THREE.FBXLoader();
            
            // Load character with idle animation
            fbxLoader.load('https://assets.mixamo.com/characters/ybot.fbx', (fbx) => {
                character = fbx;
                character.scale.setScalar(0.1); // Adjust scale as needed
                character.position.set(-8, 0, 0);
                character.traverse(c => {
                    c.castShadow = true;
                });
                scene.add(character);

                // Setup animation mixer
                mixer = new THREE.AnimationMixer(character);

                // Load animations
                loadAnimation('idle', 'https://assets.mixamo.com/animations/idle.fbx');
                loadAnimation('running', 'https://assets.mixamo.com/animations/running.fbx');
                loadAnimation('jumping', 'https://assets.mixamo.com/animations/jump.fbx');
            });
        }

        function loadAnimation(name, url) {
            const fbxLoader = new THREE.FBXLoader();
            fbxLoader.load(url, (animationFBX) => {
                const animation = animationFBX.animations[0];
                animations[name] = mixer.clipAction(animation);
                
                if (name === 'idle') {
                    animations.idle.play();
                    currentAction = animations.idle;
                }
            });
        }

        function transitionTo(newAction) {
            if (currentAction === newAction) return;
            
            if (currentAction) {
                currentAction.fadeOut(0.2);
            }
            
            newAction.reset().fadeIn(0.2).play();
            currentAction = newAction;
        }

        function updateCharacter() {
            if (mixer) {
                mixer.update(clock.getDelta());
            }
        }
    </script>
</body>
</html> 